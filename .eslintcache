[{"/Users/almazsaripov/Documents/Projects/todo-list/src/index.js":"1","/Users/almazsaripov/Documents/Projects/todo-list/src/App.js":"2","/Users/almazsaripov/Documents/Projects/todo-list/src/components/List/index.jsx":"3","/Users/almazsaripov/Documents/Projects/todo-list/src/components/AddListButton/index.jsx":"4","/Users/almazsaripov/Documents/Projects/todo-list/src/components/Badge/index.jsx":"5","/Users/almazsaripov/Documents/Projects/todo-list/src/components/Tasks/index.jsx":"6","/Users/almazsaripov/Documents/Projects/todo-list/src/components/AddListButton/AddListButton.jsx":"7"},{"size":220,"mtime":1609741657587,"results":"8","hashOfConfig":"9"},{"size":3820,"mtime":1609929860846,"results":"10","hashOfConfig":"9"},{"size":1091,"mtime":1609927071756,"results":"11","hashOfConfig":"9"},{"size":76,"mtime":1609916539976,"results":"12","hashOfConfig":"9"},{"size":289,"mtime":1609829041783,"results":"13","hashOfConfig":"9"},{"size":1739,"mtime":1609929628086,"results":"14","hashOfConfig":"9"},{"size":2946,"mtime":1609927006572,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"urgjjo",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"/Users/almazsaripov/Documents/Projects/todo-list/src/index.js",[],["33","34"],"/Users/almazsaripov/Documents/Projects/todo-list/src/App.js",["35","36"],"/Users/almazsaripov/Documents/Projects/todo-list/src/components/List/index.jsx",["37"],"import React from 'react';\nimport className from 'classnames'\nimport './List.scss'\nimport Badge from \"../Badge\";\nimport removeSvg from '../../assets/img/remove.svg'\n\n\nfunction List({items,isRemovable,onClick,onRemove,onClickItem,activeItem}) {\n    console.log(items)\n    const questionBeforeRemoveList=(id)=>{\n        if (window.confirm('Вы точно хотите удалить список?')) onRemove(id)\n    }\n\n    return (\n        <ul onClick={onClick} className=\"list\">\n            {items && items.map((i,index) => {\n                return <li onClick={onClickItem ? ()=>onClickItem(i) : null} key={index} className={className(i.className,{'active': activeItem &&  i.id==activeItem.id})}>\n                    <i>{i.icon ? i.icon : (<Badge color={i.color.name}/>)}</i>\n                    <span>{i.name} {i.tasks && `(${i.tasks.length})`}</span>\n                    {isRemovable&&<img onClick={()=>questionBeforeRemoveList(i.id)} className={'list__remove-icon'} src={removeSvg} alt=\"remove icon\"/>}\n\n                </li>\n            })}\n        </ul>\n    );\n}\n\nexport default List;","/Users/almazsaripov/Documents/Projects/todo-list/src/components/AddListButton/index.jsx",[],"/Users/almazsaripov/Documents/Projects/todo-list/src/components/Badge/index.jsx",[],"/Users/almazsaripov/Documents/Projects/todo-list/src/components/Tasks/index.jsx",["38"],"/Users/almazsaripov/Documents/Projects/todo-list/src/components/AddListButton/AddListButton.jsx",["39","40"],"import React, {useState, useEffect} from \"react\";\nimport List from \"../List\";\nimport './addListButton.scss'\nimport Badge from \"../Badge\";\nimport closeSvg from '../../assets/img/close.svg'\nimport axios from \"axios\";\n\nconst AddListButton = ({colors, onAddList}) => {\n\n    let [visiblePopup, setvisiblePopup] = useState(false)\n    let [selectedColor, selectColor] = useState(3)\n    let [inputValue, setInputValue] = useState('')\n    let [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n        if (Array.isArray(colors)) selectColor(colors[0].id)\n\n    }, [colors])\n\n    const onClose = () => {\n        setInputValue('')\n        setvisiblePopup(false)\n        selectColor(colors[0].id)\n    }\n\n    const addList = () => {\n        if (!inputValue) {\n            alert('Чтобы дабавить задачу введите название.');\n            return\n        }\n        setIsLoading(true)\n        axios.post('http://localhost:3001/lists', {name: inputValue, colorId: selectedColor})\n            .then(({data}) => {\n                const listObj = {...data, color: {name: colors.find(i => i.id == selectedColor).name}}\n                onAddList(listObj)\n            }).finally(() => {\n            onClose()\n            setIsLoading(false)\n        })\n    }\n\n    return (\n        <div className={'add-list'}>\n            <List onClick={() => {\n                if (visiblePopup) onClose()\n                setvisiblePopup(!visiblePopup)\n            }}\n\n                  items={[\n                {\n                    className: 'list__add-button',\n                    icon: <svg width=\"12\" height=\"12\" viewBox=\"0 0 16 16\" fill=\"none\"\n                               xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M8 1V15\" stroke=\"black\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                        <path d=\"M1 8H15\" stroke=\"black\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </svg>,\n                    name: 'Добавить список'\n                }\n            ]}/>\n\n            {visiblePopup && <div className={'add-list__popup'}>\n                <img src={closeSvg} onClick={onClose} className={'add-list__popup-close-btn'} alt=\"Close button\"/>\n                <input onChange={(e) => setInputValue(e.target.value)} value={inputValue} className={'field'}\n                       placeholder={'Название списка'} type=\"text\"/>\n                <div className={'add-list__popup-color'}>\n                    {colors.map(i => <Badge className={selectedColor == i.id && 'active'} onClick={() => {\n                        selectColor(i.id)\n                    }} key={i.id} color={i.name}/>)}\n\n                </div>\n                <button onClick={addList} className={'button'}>{isLoading ? 'Добавление' : 'Добавить'}</button>\n\n            </div>}\n        </div>\n    );\n};\nexport default AddListButton;",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":38,"column":41,"nodeType":"47","messageId":"48","endLine":38,"endColumn":43},{"ruleId":"45","severity":1,"message":"49","line":46,"column":28,"nodeType":"47","messageId":"48","endLine":46,"endColumn":30},{"ruleId":"45","severity":1,"message":"49","line":17,"column":153,"nodeType":"47","messageId":"48","endLine":17,"endColumn":155},{"ruleId":"45","severity":1,"message":"46","line":9,"column":33,"nodeType":"47","messageId":"48","endLine":9,"endColumn":35},{"ruleId":"45","severity":1,"message":"49","line":34,"column":79,"nodeType":"47","messageId":"48","endLine":34,"endColumn":81},{"ruleId":"45","severity":1,"message":"49","line":66,"column":70,"nodeType":"47","messageId":"48","endLine":66,"endColumn":72},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]